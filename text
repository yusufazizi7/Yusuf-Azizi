document.addEventListener('DOMContentLoaded', async () => {
    try {
        // Dynamically figure out Hafs page link
        const currentPath = window.location.pathname.split('/').pop();
        const baseName = currentPath.replace('.html', '').replace('-warsh', '');
        const hafsPage = baseName + '.html';

        // Fetch Hafs page
        const response = await fetch(hafsPage);
        const hafsHtml = await response.text();
        const parser = new DOMParser();
        const hafsDoc = parser.parseFromString(hafsHtml, 'text/html');

        // Get all Hafs and Warsh ayahs
        const hafsAyahs = hafsDoc.querySelectorAll('.ayah-block .arabic-text');
        const warshAyahs = document.querySelectorAll('.ayah-block .arabic-text');

        // 1. Combine full texts
        const fullHafsText = normalizeArabic(Array.from(hafsAyahs).map(e => e.textContent.trim()).join(' '));
        const fullWarshText = normalizeArabic(Array.from(warshAyahs).map(e => e.textContent.trim()).join(' '));

        // 2. Split into graphemes
        const hafsSegments = splitArabicWithSpaces(fullHafsText);
        const warshSegments = splitArabicWithSpaces(fullWarshText);

        const maxLength = Math.max(hafsSegments.length, warshSegments.length);

        // 3. Build full outputHtml
        let outputHtml = '';
        let diffBuffer = '';

        for (let i = 0; i < maxLength; i++) {
            const hafsSegment = hafsSegments[i] || '';
            const warshSegment = warshSegments[i] || '';

            if (warshSegment === ' ') {
                if (diffBuffer.length > 0) {
                    outputHtml += `<span class="diff-from-hafs">${diffBuffer}</span>`;
                    diffBuffer = '';
                }
                outputHtml += ' ';
                continue;
            }

            const isHafsNumber = /^[\u0660-\u0669]+$/.test(hafsSegment);
            const isWarshNumber = /^[\u0660-\u0669]+$/.test(warshSegment);

            if (isHafsNumber && isWarshNumber) {
                if (diffBuffer.length > 0) {
                    outputHtml += `<span class="diff-from-hafs">${diffBuffer}</span>`;
                    diffBuffer = '';
                }
                outputHtml += warshSegment;
                continue;
            }

            if (hafsSegment === warshSegment) {
                if (diffBuffer.length > 0) {
                    outputHtml += `<span class="diff-from-hafs">${diffBuffer}</span>`;
                    diffBuffer = '';
                }

                if (isRaMuraqqaqah(hafsSegments, i)) {
                    outputHtml += `<span class="ra-muraqqaqah">${warshSegment}</span>`;
                } else {
                    outputHtml += warshSegment;
                }
            } else {
                diffBuffer += warshSegment;
            }
        }

        if (diffBuffer.length > 0) {
            outputHtml += `<span class="diff-from-hafs">${diffBuffer}</span>`;
        }

        // 4. Distribute back into ayah blocks correctly

        // Prepare
        const hafsWordCounts = Array.from(hafsAyahs).map(ayah => {
            const text = normalizeArabic(ayah.textContent.trim());
            return splitArabicWithSpaces(text).filter(x => x.trim() !== '').length;
        });

        const warshWordCounts = Array.from(warshAyahs).map(ayah => {
            const text = normalizeArabic(ayah.textContent.trim());
            return splitArabicWithSpaces(text).filter(x => x.trim() !== '').length;
        });

        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = outputHtml;
        const outputNodes = Array.from(tempDiv.childNodes);

        let currentOutputIndex = 0;
        let currentWarshIndex = 0;

        hafsWordCounts.forEach(hafsCount => {
            let warshGroup = [];
            let groupWordCount = 0;

            // Group multiple warsh ayahs if needed
            while (currentWarshIndex < warshWordCounts.length && groupWordCount < hafsCount) {
                warshGroup.push(warshAyahs[currentWarshIndex]);
                groupWordCount += warshWordCounts[currentWarshIndex];
                currentWarshIndex++;
            }

            // Fill these warsh ayahs with output
            warshGroup.forEach(warshAyah => {
                warshAyah.innerHTML = '';
                warshAyah.style.direction = 'rtl';

                let neededWords = warshWordCounts[Array.from(warshAyahs).indexOf(warshAyah)];
                let added = 0;

                while (currentOutputIndex < outputNodes.length && added < neededWords) {
                    const node = outputNodes[currentOutputIndex++];
                    warshAyah.appendChild(node.cloneNode(true));
                    if (node.nodeType === 3) { // text node
                        added += splitArabicWithSpaces(node.textContent).filter(x => x.trim() !== '').length;
                    } else if (node.nodeType === 1) { // element node
                        added += splitArabicWithSpaces(node.textContent).filter(x => x.trim() !== '').length;
                    }
                }
            });
        });

    } catch (error) {
        console.error('Error loading or parsing Hafs page:', error);
    }
});

// Helper functions (same as yours)
function splitArabicWithSpaces(text) {
    const segments = [];
    const regex = /(\s+)|(\p{Script=Arabic})([\u064B-\u065F\u0610-\u061A\u06D6-\u06DC\u06DF-\u06E8\u06EA-\u06ED\u0670]*)/gu;
    let match;
    while ((match = regex.exec(text)) !== null) {
        if (match[1]) {
            segments.push(' ');
        } else if (match[2]) {
            segments.push(match[2] + (match[3] || ''));
        }
    }
    return segments;
}

function normalizeArabic(text) {
    return text.normalize('NFC');
}

function isRaMuraqqaqah(segments, index) {
    const current = segments[index] || '';
    const previous = segments[index - 1] || '';

    if (!current.startsWith('ر')) return false;

    if (current.includes('\u0650') || current.includes('\u0652')) {
        return false;
    }

    const harakatRegex = /[\u064B-\u0652\u0670]/;
    if (!harakatRegex.test(current)) {
        return false;
    }

    if (previous.includes('\u0650')) {
        return true;
    }

    if (previous.startsWith('ي') && previous.includes('\u0652')) {
        return true;
    }

    return false;
}
